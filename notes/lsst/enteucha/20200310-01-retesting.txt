#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#

# -----------------------------------------------------
# Login to one of the trop machines and run a virtual machine.
#[user@desktop]

    ssh trop04

        createvm

    >   ....
    >   INFO : Node name [Larilaweth]
    >   INFO : Base name [fedora-28-docker-base-20180708.qcow]
    >   INFO : Base path [/var/lib/libvirt/images/base/fedora-28-docker-base-20180708.qcow]
    >   INFO : Disc name [Larilaweth.qcow]
    >   INFO : Disc size [16GiB]
    >   ....

# -----------------------------------------------------
# Update the virtual machine memory allocation.
#[user@trop04]

    vmname=Larilaweth
    vmsize=100G

    source "${HOME}/libvirt.settings"

    virsh \
        --connect "${connection:?}" \
        shutdown "${vmname:?}"

    >   Domain Larilaweth is being shutdown


    virsh \
        --connect "${connection:?}" \
        list \
            --all

    >    Id    Name                           State
    >   ----------------------------------------------------
    >    -     Larilaweth                     shut off


    virsh \
        --connect "${connection:?}" \
        setmaxmem "${vmname:?}" \
            "${vmsize:?}" \
            --config

    virsh \
        --connect "${connection:?}" \
        setmem "${vmname:?}" \
            "${vmsize:?}" \
            --config
        
    virsh \
        --connect "${connection:?}" \
        start "${vmname:?}"
        
    >   Domain Larilaweth started


    virsh \
        --connect "${connection:?}" \
        list \
            --all

    >    Id    Name                           State
    >   ----------------------------------------------------
    >    10    Larilaweth                     running


# -----------------------------------------------------
# Login to the new virtual machine.
#[user@desktop]
        
    ssh Larilaweth

# -----------------------------------------------------
# Create our cache directory.
#[user@virtual]

    sudo mkdir /var/local/cache
    sudo chgrp 'users' /var/local/cache
    sudo chmod 'a+rwx' /var/local/cache

    # Need to make it 'a' ragter than 'g' because Docker user still has root group.

# -----------------------------------------------------
# Create our build directory.
#[user@virtual]

    sudo mkdir -p /var/local/build
    sudo chgrp 'users' /var/local/build
    sudo chmod 'a+rwx' /var/local/build


# -----------------------------------------------------
# -----------------------------------------------------
# Transfer (push) a copy of the JHU source code.
#[user@desktop]

    source "${HOME}/phymatopus.settings"
    pushd "${PHYMATOPUS_CODE:?}"

        scp -r "../external/htmid/jhu-htmid" \
            Larilaweth:/var/local/build/jhu-htmid

        popd
    popd


    >      
    >   TestHTMfunc.java                              100% 7921   295.3KB/s   00:00    
    >   TestHTMindexImp.java                          100% 5411   182.8KB/s   00:00    
    >   ....
    >   htmid-3.0.1.jar                               100%   83KB  92.9KB/s   00:00    
    >   duplicate-finder-result.xml                   100% 5627   126.5KB/s   00:00  


# -----------------------------------------------------
# -----------------------------------------------------
# Create our settings file.
#[user@virtual]

    cat > "${HOME}/enteucha.settings" << 'EOF'
ENTEUCHA_REPO='git@github.com:Zarquan/enteucha.git'
ENTEUCHA_CODE='/var/local/build/enteucha'
EOF


# -----------------------------------------------------
# Checkout our source code.
#[user@virtual]

    source "${HOME}/enteucha.settings"

    echo "Checking [${ENTEUCHA_CODE}]"
    if [ ! -e "${ENTEUCHA_CODE:?}" ]
    then
        echo "Creating [${ENTEUCHA_CODE}]"
        mkdir "$(dirname ${ENTEUCHA_CODE:?})"
        pushd "$(dirname ${ENTEUCHA_CODE:?})"
            git clone "${ENTEUCHA_REPO:?}" "$(basename ${ENTEUCHA_CODE:?})"
        popd
    else
        echo "Updating [${ENTEUCHA_CODE}]"
        pushd "${ENTEUCHA_CODE:?}"
            git pull
        popd
    fi

    >   remote: Enumerating objects: 81, done.
    >   remote: Counting objects: 100% (81/81), done.
    >   remote: Compressing objects: 100% (37/37), done.
    >   remote: Total 1059 (delta 24), reused 68 (delta 19), pack-reused 978
    >   Receiving objects: 100% (1059/1059), 608.15 KiB | 313.00 KiB/s, done.
    >   Resolving deltas: 100% (314/314), done.


# -----------------------------------------------------
# Checkout the current dev branch.
#[user@virtual]
    
    branchname=20200309-zrq-retest

    source "${HOME}/enteucha.settings"

    pushd "${ENTEUCHA_CODE:?}"
        git checkout "${branchname:?}"
    popd


    >   Branch '20200309-zrq-retest' set up to track remote branch '20200309-zrq-retest' from 'origin'.
    >   Switched to a new branch '20200309-zrq-retest'

# -----------------------------------------------------
# Run an instance of firethorn builder container.
#[user@virtual]

    docker run \
        --rm \
        --tty \
        --interactive \
        --user "$(id -u)" \
        --volume "/var/local/cache:/var/local/cache" \
        --volume "/var/local/build:/var/local/build" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        --volume "/var/run/docker.sock:/var/run/docker.sock" \
        --volume "${secretsh}:/bin/secret" \
        "firethorn/builder:latest" \
        'bash'


# -----------------------------------------------------
# -----------------------------------------------------
# Build the JHU library.
#[user@builder]

    # Need to skip tests because they fail for some reason !?

    pushd /var/local/build/jhu-htmid
        mvn clean install -D 'skipTests=true'
    popd

    >   ....
    >   ....
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 17.821 s
    >   [INFO] Finished at: 2020-03-12T15:27:43Z
    >   [INFO] Final Memory: 33M/1904M
    >   [INFO] ------------------------------------------------------------------------



# -----------------------------------------------------
# Build our source code.
#[user@builder]

    pushd /var/local/build/enteucha
        mvn clean compile
    popd

    >   ....
    >   ....
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 19.915 s
    >   [INFO] Finished at: 2020-03-12T15:28:28Z
    >   [INFO] Final Memory: 35M/1170M
    >   [INFO] ------------------------------------------------------------------------



# -----------------------------------------------------
# Update our test config.
#[user@builder]

    pushd /var/local/build/enteucha

        vi src/test/conf/logback.xml 

            <!--+
                | Enteucha logging.
                +-->
            <logger name="uk.ac.roe.wfau.enteucha">
        -       <level value="DEBUG"/>
        +       <level value="INFO"/>
            </logger>


    popd


# -----------------------------------------------------
# Run our tests.
#[user@builder]

    source "${HOME}/enteucha.settings"
    ENTEUCHA_CODE=/var/local/build/enteucha

    retest()
        {
        pushd "${ENTEUCHA_CODE:?}"
            mvn clean compile
            mvn test -D 'test=HsqlHtmidMatcherTestCase' ; mv target/enteucha-trace.log target/enteucha-htmid.log
            mvn test -D 'test=HsqlZoneMatcherTestCase'  ; mv target/enteucha-trace.log target/enteucha-zone.log
            mvn test -D 'test=CQZoneMatcherTestCase'    ; mv target/enteucha-trace.log target/enteucha-cq.log
        popd
        }

    retest

    >   ....
    >   ....

